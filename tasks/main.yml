---
- name: assert platform is supported
  assert:
    that:
      - ansible_architecture in ['x86_64']
      - ansible_os_family in ['RedHat']

- name: set os name
  set_fact:
    os_name: linux
  when: ansible_system == 'Linux'

- name: set os architecture
  set_fact:
    os_arch: x64
  when: ansible_architecture == 'x86_64'

- name: include version-specific variables
  include_vars: "versions/{{ nexus_version }}.yml"

- name: ensure download directory exists
  file: path="{{ nexus_download_path }}" state=directory

- name: get Nexus tarball (tar.gz)
  get_url:
    url: "{{ nexus_mirror }}/{{ nexus_tarball }}"
    checksum: "{{ nexus_redis_checksum }}"
    dest: "{{ nexus_download_path }}/{{ nexus_tarball }}"
    owner: root
    group: root
    mode: "u=rwx,go=rx"
  register: nexus_redis_get
  until: "'OK' in nexus_redis_get.msg or 'file already exists' in nexus_redis_get.msg"
  retries: "{{ download_retries }}"
  delay: "{{ download_delay }}"

- name: ensure Nexus group exists
  group: name="{{ nexus_group }}" state=present

- name: ensure Nexus user exists
  user: name="{{ nexus_group }}" group="{{ nexus_user }}" shell="{{ nexus_user_shell }}" state=present

- name: ensure installation directory exists
  file:
    path: "{{ nexus_install_path }}/nexus-{{ nexus_version }}"
    state: directory
    owner: root
    group: root
    mode: "u=rwx,go=rx"

- name: install Nexus tarball (tar.gz)
  unarchive:
    src: "{{ nexus_download_path }}/{{ nexus_tarball }}"
    dest: "{{ nexus_install_path }}"
    owner: "{{ nexus_user }}"
    group: "{{ nexus_group }}"
    mode: "go-w"
    copy: no

- name: create symbolic link
  file:
    src: "{{ nexus_install_path }}/nexus-{{ nexus_version }}"
    dest: "{{ nexus_install_path }}/nexus"
    owner: "{{ nexus_user }}"
    group: "{{ nexus_group }}"
    force: true
    state: link

- name: ensure Nexus working directory exists
  file:
    path: "{{ nexus_working_path }}"
    state: "directory"
    owner: "{{ nexus_user }}"
    group: "{{ nexus_group }}"
    mode: "go-w"

- name: ensure Nexus pid directory exists
  file:
    path: "{{ nexus_run_path }}"
    state: "directory"
    owner: "{{ nexus_user }}"
    group: "{{ nexus_group }}"
    mode: "go-w"

- name: delete default sonatype-work directory
  file: path="{{ nexus_install_path }}/sonatype-work" state="absent"

- name: remove temporary downloaded files, if requested
  file: path="{{ nexus_download_path }}/{{ item }}" state=absent
  with_items:
    - "{{ nexus_tarball }}"
  ignore_errors: true
  when: nexus_download_cleanup

- name: configure Nexus (nexus.properties)
  lineinfile:
    dest: "{{ nexus_install_path }}/nexus-{{ nexus_version }}/conf/nexus.properties"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regexp: 'application-port=.*', line: 'application-port={{ nexus_port }}' }
    - { regexp: 'nexus-work=.*', line: 'nexus-work={{ nexus_working_path }}' }

- name: Ensure Nexus is started
  service: name=nexus state=started enabled=yes
